#include <iostream>
#include <cmath>
#include <limits>

struct Vec3 {
    float x, y, z;

    Vec3() : x(0), y(0), z(0) {}
    Vec3(float x_, float y_, float z_) : x(x_), y(y_), z(z_) {}

    Vec3 operator+(const Vec3& other) const {
        return Vec3(x + other.x, y + other.y, z + other.z);
    }

    Vec3 operator-(const Vec3& other) const {
        return Vec3(x - other.x, y - other.y, z - other.z);
    }

    Vec3 operator*(float scalar) const {
        return Vec3(x * scalar, y * scalar, z * scalar);
    }

   
    Vec3 operator/(float scalar) const {
        return Vec3(x / scalar, y / scalar, z / scalar);
    }

    float dot(const Vec3& other) const {
        return x * other.x + y * other.y + z * other.z;
    }

    Vec3 cross(const Vec3& other) const {
        return Vec3(y * other.z - z * other.y, z * other.x - x * other.z, x * other.y - y * other.x);
    }

    float length() const {
        return std::sqrt(x * x + y * y + z * z);
    }

    Vec3 normalize() const {
        float len = length();
        if (len > 0)
            return *this / len;
        else
            return *this;
    }
};

struct Ray {
    Vec3 origin;
    Vec3 direction;

    Ray(const Vec3& origin_, const Vec3& direction_) : origin(origin_), direction(direction_) {}
};

struct Sphere {
    Vec3 center;
    float radius;

    Sphere(const Vec3& center_, float radius_) : center(center_), radius(radius_) {}

    bool intersect(const Ray& ray, float& t) const {
        Vec3 oc = ray.origin - center;
        float a = ray.direction.dot(ray.direction);
        float b = 2.0f * oc.dot(ray.direction);
        float c = oc.dot(oc) - radius * radius;
        float discriminant = b * b - 4 * a * c;
        if (discriminant < 0)
            return false;
        else {
            float sqrtDiscriminant = std::sqrt(discriminant);
            float t1 = (-b - sqrtDiscriminant) / (2.0f * a);
            float t2 = (-b + sqrtDiscriminant) / (2.0f * a);
            if (t1 > 0 || t2 > 0) {
                t = (t1 > 0) ? t1 : t2;
                return true;
            }
            else {
                return false;
            }
        }
    }
};

Vec3 trace(const Ray& ray, const Sphere& sphere) {
    float t;
    if (sphere.intersect(ray, t)) {
        Vec3 intersectionPoint = ray.origin + ray.direction * t;
        Vec3 normal = (intersectionPoint - sphere.center).normalize();
        return 0.5f * Vec3(normal.x + 1.0f, normal.y + 1.0f, normal.z + 1.0f);
    }
    return Vec3(0.0f, 0.0f, 0.0f);  // Background color
}

int main() {
    const int imageWidth = 800;
    const int imageHeight = 400;

    const Vec3 cameraPosition(0.0f, 0.0f, -5.0f);
    const Vec3 lightDirection(0.0f, 0.0f, -1.0f);

    const Sphere sphere(Vec3(0.0f, 0.0f, 0.0f), 1.0f);

    std::cout << "Rendering..." << std::endl;

    for (int j = imageHeight - 1; j >= 0; --j) {
        for (int i = 0; i < imageWidth; ++i) {
            float u = float(i) / float(imageWidth);
            float v = float(j) / float(imageHeight);

            Vec3 direction(u - 0.5f, v - 0.5f, 1.0f);
            Ray ray(cameraPosition, direction.normalize());

            Vec3 color = trace(ray, sphere);

            // Apply simple shading based on the dot product of the surface normal and light direction
            float shading = color.dot(lightDirection);
            color = color * shading;

            int r = static_cast<int>(255.99f * color.x);
            int g = static_cast<int>(255.99f * color.y);
            int b = static_cast<int>(255.99f * color.z);

            std::cout << r << " " << g << " " << b << std::endl;
        }
    }

    return 0;
}
